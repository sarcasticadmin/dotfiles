# shellcheck disable=SC2148
# vi:filetype=sh
# cloud aliases

# Mapping AWS code to region (.i.e. N. Virginia => us-east-1)
# Because I cant ever remember this name to code mapping
aws-region() {
  regions=$(curl -Ss https://raw.githubusercontent.com/jsonmaur/aws-regions/master/regions.json)
  if [ "$1" ];then
    echo "$regions" | jq --arg loc "$1" -r '.[]| select((.name|ascii_downcase)==($loc|ascii_downcase)) | .code'
  else
    echo "$regions" | jq -r '.[] | [ .code, .name ] | @tsv'
  fi
}

# ec2 pubkey fingerprints arent like traditional ssh-keygen fingerprints
# adding this so its easy to generate a fingerprint when trying to match
# whats in the AWS console
# Source: https://serverfault.com/questions/603982/why-does-my-openssh-key-fingerprint-not-match-the-aws-ec2-console-keypair-finger
aws-ec2-fp() {
  ssh-keygen -e -f "$1" -m pkcs8 | openssl pkey -pubin -outform der | openssl md5 -c
}

if command -v aws > /dev/null 2>&1; then
  # Generate a temporary set of AWS credentials
  # Useful when tool require AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
  # Make sure to export AWS_SESSION_TOKEN as well
  aws-temp-keys() {
    # shellcheck disable=SC2068
    aws sts assume-role --role-session-name temp-"$(date +%s)" $@
  }

  # Clean up the mess of AWS credentials if any are set
  aws-env-clean() {
    unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_PROFILE AWS_DEFAULT_REGION AWS_REGION
  }

  # Set env of AWS credentials I cant remember
  aws-env-set() {
    exs=(AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN)
    for ex in "${exs[@]}";do
      read -rp "Enter ${ex}: " resp
      export "$ex"="$resp"
    done
  }
fi
