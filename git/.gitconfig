[user]
  name  = Robert James Hernandez
  email = rob@sarcasticadmin.com
[core]
  editor = vim
  pager  = less -R
[advice]
  # ignore horrible advice when push fails
  pushNonFastForward = false
  # ignore merge conflict resolution sugestions
  resolveConflict    = false
[stash]
  showPatch = true
[diff]
  # diff better when reordering code
  algorithm = histogram
  tool = icdiff
  renameLimit = 9999
[rebase]
  # Allow for marking commit fixups prior to rebase during
  # git commit --fixup
  autoSquash = true
[branch]
  # sort by most recently used branches instead of alphabetical
  sort = -committerdate
[tag]
  # sort by most recently created tags
  sort = -taggerdate
[rerere]
  #enabled = true
[difftool]
  prompt = false
[difftool "icdiff"]
  cmd = icdiff --line-numbers $LOCAL $REMOTE
[merge]
  # Provide even better context during a merge conflict than diff3
  # release notes for git v2.35: https://lore.kernel.org/git/xmqqee4x3pij.fsf@gitster.g/T/#u
  # example usage: https://github.blog/2022-01-24-highlights-from-git-2-35/
  conflictStyle = zdiff3
[alias]
  stats   = shortlog -sn --all --no-merges
  recap   = log --all --oneline --no-merges --author=rob@sarcasticadmin.com
  recent  = for-each-ref --count=10 --sort=-committerdate refs/heads/ --format="%(refname:short)"
  today   = log --since=00:00:00 --all --no-merges --oneline --author=rob@sarcasticadmin.com
  graph   = log --graph --all --decorate --stat --date=iso
  root    = rev-parse --show-toplevel
  ignore  = "!gi() { curl -L -s https://www.gitignore.io/api/$@ ;}; gi"
  stale  = "!f() { \
      remote=${1-upstream}; \
      git branch -r --merged $remote/master | grep $remote | grep -v '>' | grep -v master | xargs -L1 | cut -d\"/\" -f2-;\
    }; f"
  license = "!gl() { \
    if [ -z $@ ];then \
      curl -L -s https://api.github.com/licenses | jq -r '.[].key'; \
    else \
      curl -L -s https://api.github.com/licenses/$@ | jq -r '.body'; \
    fi;}; gl"
  # 10:1 ratio calculator https://www.ybrikman.com/writing/2018/08/12/the-10-to-1-rule-of-writing-and-programming/
  # git +- / total lines of code
  # Cloc to hammer on all cores avail
  churn   = "!gc() { \
    echo \"scale=2; $(git log --shortstat | awk '/files changed/ {total+=$4; total+=$6} END {print total}') / $(cloc . --json --diff-timeout 20 --processes=$(nproc) | jq -r '.SUM.code')\" | bc ; \
    }; gc"
  # Quickly create a branch thats unique. Add a suffix to make it standout if needed
  # Date is prefixed for easy sorting with git branch
  checkout-date = "!f() { \
      bn=$(printf -- 'rh/%s%s' $(date +%s) $1); \
      git checkout -b ${bn}; \
    }; f"
  fixup = "!f() { \
      BRANCH=${1:-'master'}; \
      git reset --soft ${BRANCH} && git commit; \
    }; f"
  tagtype = "for-each-ref refs/tags"
  semver = "!f() { git tag | sort -V;}; f"
[lfs]
  # Ignore excessive nagging: "Locking support detected on remote "origin". Consider enabling it with:"
  locksverify = false

[filter "lfs"]
  clean    = git-lfs clean -- %f
  smudge   = git-lfs smudge -- %f
  process  = git-lfs filter-process
  required = true

[include]
  path = ~/.gitconfig.d/hub
  path = ~/.gitconfig.d/99-work

[push]
  # default --set-upstream branch to the same name as local branch
  default = current

[clone]
  # "origin" is for forks which I do less often
  defaultRemoteName = upstream
