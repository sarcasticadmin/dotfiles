#!/bin/sh

usage(){
  cat << EOF
usage: $(basename $0) [OPTIONS] ARGS

Simple tool for interacting with wpa_cli for wifi

OPTIONS:
  -h      Show this message

SUBCOMMANDS:
  add     Add a new wifi via SSID and passphrase
  disable Disable network thats exists in wpa_supplicant.config
  enable  Enable network thats exists in wpa_supplicant.config
  list    List the available configured networks and current status
  status  Display the status of the wifi interface

EXAMPLES:
  To print out networks:

      $(basename $0) list

  Add open wifi SSID to wpa_supplicant.conf:

      $(basename $0) add openwifissid

  Get status for specific interface:

      $(basename $0) status -i wlan0

EOF
}

while getopts "h" OPTION
do
  case $OPTION in
    h )
      usage
      exit 0
      ;;
    \? )
      usage
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))

case $1 in
    "status")
      shift
      wpa_cli "$@" status
      ;;
    "list")
      shift
      wpa_cli "$@" list_networks
      ;;
    "scan")
      shift
      wpa_cli "$@" scan
      sleep 1
      wpa_cli "$@" scan_results
      ;;
    "enable")
      SSID="$2"
      shift 2
      wpa_cli "$@" enable_network "$SSID"
      ;;
    "disable")
      SSID="$2"
      shift 2
      wpa_cli "$@" disable_network "$SSID"
      ;;
    "add")
      SSID="$2"
      PSK="$3"
      shift 3
      NETWORK_ID=$(wpa_cli "$@" add_network | awk -F' ' 'NR == 2 {print $NF}')
      if [ -z $PSK ];then
        wpa_cli "$@" << EOF
set_network $NETWORK_ID ssid "$SSID"
set_network $NETWORK_ID key_mgmt NONE
save_config
EOF
      else
        # TODO Make this nicer
        if [ $PSK == "-p" ];then
          read -p "Enter in pass: " PSK
        fi
        wpa_cli "$@" << EOF
set_network $NETWORK_ID ssid "$SSID"
set_network $NETWORK_ID psk "$PSK"
save_config
EOF
      fi
      echo "Successfully added $NETWORK_ID"
      ;;
    "*")
      usage
      exit 1
  esac
exit 0
